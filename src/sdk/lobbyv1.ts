/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as models from "../models";

export class LobbyV1 extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async createPrivateLobbyDeprecated(
        security: models.CreatePrivateLobbyDeprecatedSecurity,
        appId?: string | undefined,
        local?: boolean | undefined,
        region?: models.Region | undefined,
        options?: RequestOptions
    ): Promise<models.CreatePrivateLobbyDeprecatedResponse> {
        const input: models.CreatePrivateLobbyDeprecatedRequest | undefined = {
            appId: appId,
            local: local,
            region: region,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = models.CreatePrivateLobbyDeprecatedRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/lobby/v1/{appId}/create/private")(pathParams);

        const query = [
            enc$.encodeForm("local", payload.local, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("region", payload.region, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const securitySettings = this.resolveSecurity([
            { value: security?.playerAuth, fieldName: "Authorization", type: "http:bearer" },
        ]);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.text();
            const result = models.CreatePrivateLobbyDeprecatedResponse$.inboundSchema.parse({
                ...responseFields,
                RoomId: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async createPublicLobbyDeprecated(
        security: models.CreatePublicLobbyDeprecatedSecurity,
        appId?: string | undefined,
        local?: boolean | undefined,
        region?: models.Region | undefined,
        options?: RequestOptions
    ): Promise<models.CreatePublicLobbyDeprecatedResponse> {
        const input: models.CreatePublicLobbyDeprecatedRequest | undefined = {
            appId: appId,
            local: local,
            region: region,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = models.CreatePublicLobbyDeprecatedRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/lobby/v1/{appId}/create/public")(pathParams);

        const query = [
            enc$.encodeForm("local", payload.local, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("region", payload.region, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const securitySettings = this.resolveSecurity([
            { value: security?.playerAuth, fieldName: "Authorization", type: "http:bearer" },
        ]);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.text();
            const result = models.CreatePublicLobbyDeprecatedResponse$.inboundSchema.parse({
                ...responseFields,
                RoomId: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * @deprecated method: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    async listActivePublicLobbiesDeprecatedV1(
        appId?: string | undefined,
        local?: boolean | undefined,
        region?: models.Region | undefined,
        options?: RequestOptions
    ): Promise<models.ListActivePublicLobbiesDeprecatedV1Response> {
        const input: models.ListActivePublicLobbiesDeprecatedV1Request | undefined = {
            appId: appId,
            local: local,
            region: region,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload =
            models.ListActivePublicLobbiesDeprecatedV1Request$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/lobby/v1/{appId}/list")(pathParams);

        const query = [
            enc$.encodeForm("local", payload.local, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("region", payload.region, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = models.ListActivePublicLobbiesDeprecatedV1Response$.inboundSchema.parse({
                ...responseFields,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
