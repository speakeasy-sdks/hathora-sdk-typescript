/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as models from "../models";

export class RoomV2 extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create a new [room](https://hathora.dev/docs/concepts/hathora-entities#room) for an existing [application](https://hathora.dev/docs/concepts/hathora-entities#application). Poll the [`GetConnectionInfo()`](https://hathora.dev/api#tag/RoomV2/operation/GetConnectionInfo) endpoint to get connection details for an active room.
     */
    async createRoom(
        createRoomParams: models.CreateRoomParams,
        appId?: string | undefined,
        roomId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.CreateRoomResponse> {
        const input: models.CreateRoomRequest = {
            createRoomParams: createRoomParams,
            appId: appId,
            roomId: roomId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = models.CreateRoomRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.CreateRoomParams, { explode: true });

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/rooms/v2/{appId}/create")(pathParams);

        const query = [
            enc$.encodeForm("roomId", payload.roomId, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = models.CreateRoomResponse$.inboundSchema.parse({
                ...responseFields,
                ConnectionInfoV2: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Destroy a [room](https://hathora.dev/docs/concepts/hathora-entities#room). All associated metadata is deleted.
     */
    async destroyRoom(
        roomId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.DestroyRoomResponse> {
        const input: models.DestroyRoomRequest | undefined = {
            roomId: roomId,
            appId: appId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "*/*");

        const payload = models.DestroyRoomRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            roomId: enc$.encodeSimple("roomId", payload.roomId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/rooms/v2/{appId}/destroy/{roomId}")(pathParams);

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }

        return models.DestroyRoomResponse$.inboundSchema.parse(responseFields);
    }

    /**
     * Get all active [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     */
    async getActiveRoomsForProcess(
        processId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.GetActiveRoomsForProcessResponse> {
        const input: models.GetActiveRoomsForProcessRequest | undefined = {
            processId: processId,
            appId: appId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = models.GetActiveRoomsForProcessRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            processId: enc$.encodeSimple("processId", payload.processId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/rooms/v2/{appId}/list/{processId}/active")(
            pathParams
        );

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = models.GetActiveRoomsForProcessResponse$.inboundSchema.parse({
                ...responseFields,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Poll this endpoint to get connection details to a [room](https://hathora.dev/docs/concepts/hathora-entities#room). Clients can call this endpoint without authentication.
     */
    async getConnectionInfo(
        roomId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.GetConnectionInfoResponse> {
        const input: models.GetConnectionInfoRequest | undefined = {
            roomId: roomId,
            appId: appId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = models.GetConnectionInfoRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            roomId: enc$.encodeSimple("roomId", payload.roomId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/rooms/v2/{appId}/connectioninfo/{roomId}")(
            pathParams
        );

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = models.GetConnectionInfoResponse$.inboundSchema.parse({
                ...responseFields,
                ConnectionInfoV2: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get all inactive [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) for a given [process](https://hathora.dev/docs/concepts/hathora-entities#process).
     */
    async getInactiveRoomsForProcess(
        processId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.GetInactiveRoomsForProcessResponse> {
        const input: models.GetInactiveRoomsForProcessRequest | undefined = {
            processId: processId,
            appId: appId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = models.GetInactiveRoomsForProcessRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            processId: enc$.encodeSimple("processId", payload.processId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/rooms/v2/{appId}/list/{processId}/inactive")(
            pathParams
        );

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = models.GetInactiveRoomsForProcessResponse$.inboundSchema.parse({
                ...responseFields,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Retreive current and historical allocation data for a [room](https://hathora.dev/docs/concepts/hathora-entities#room).
     */
    async getRoomInfo(
        roomId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.GetRoomInfoResponse> {
        const input: models.GetRoomInfoRequest | undefined = {
            roomId: roomId,
            appId: appId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = models.GetRoomInfoRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            roomId: enc$.encodeSimple("roomId", payload.roomId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/rooms/v2/{appId}/info/{roomId}")(pathParams);

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = models.GetRoomInfoResponse$.inboundSchema.parse({
                ...responseFields,
                Room: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Suspend a [room](https://hathora.dev/docs/concepts/hathora-entities#room). The room is unallocated from the process but can be rescheduled later using the same `roomId`.
     */
    async suspendRoom(
        roomId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.SuspendRoomResponse> {
        const input: models.SuspendRoomRequest | undefined = {
            roomId: roomId,
            appId: appId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "*/*");

        const payload = models.SuspendRoomRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            roomId: enc$.encodeSimple("roomId", payload.roomId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/rooms/v2/{appId}/suspend/{roomId}")(pathParams);

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }

        return models.SuspendRoomResponse$.inboundSchema.parse(responseFields);
    }

    async updateRoomConfig(
        updateRoomConfigParams: models.UpdateRoomConfigParams,
        roomId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.UpdateRoomConfigResponse> {
        const input: models.UpdateRoomConfigRequest = {
            updateRoomConfigParams: updateRoomConfigParams,
            roomId: roomId,
            appId: appId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "*/*");

        const payload = models.UpdateRoomConfigRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.UpdateRoomConfigParams, { explode: true });

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            roomId: enc$.encodeSimple("roomId", payload.roomId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/rooms/v2/{appId}/update/{roomId}")(pathParams);

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchStatusCode(response, 204)) {
            // fallthrough
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }

        return models.UpdateRoomConfigResponse$.inboundSchema.parse(responseFields);
    }
}
