/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { SDK_METADATA, SDKOptions, serverURLFromOptions } from "../lib/config";
import * as enc$ from "../lib/encodings";
import { HTTPClient } from "../lib/http";
import { ClientSDK, RequestOptions } from "../lib/sdks";
import * as models from "../models";

export class LobbyV3SDK extends ClientSDK {
    private readonly options$: SDKOptions;

    constructor(options: SDKOptions = {}) {
        super({
            client: options.httpClient || new HTTPClient(),
            baseURL: serverURLFromOptions(options),
        });

        this.options$ = options;
        void this.options$;
    }
    /**
     * Create a new lobby for an [application](https://hathora.dev/docs/concepts/hathora-entities#application). A lobby object is a wrapper around a [room](https://hathora.dev/docs/concepts/hathora-entities#room) object. With a lobby, you get additional functionality like configuring the visibility of the room, managing the state of a match, and retrieving a list of public lobbies to display to players.
     */
    async createLobby(
        input: models.CreateLobbyRequest,
        security: models.CreateLobbySecurity,
        options?: RequestOptions
    ): Promise<models.CreateLobbyResponse> {
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Content-Type", "application/json");
        headers.set("Accept", "application/json");

        const payload = models.CreateLobbyRequest$.outboundSchema.parse(input);

        const body = enc$.encodeJSON("body", payload.CreateLobbyV3Params, { explode: true });

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/lobby/v3/{appId}/create")(pathParams);

        const query = [
            enc$.encodeForm("roomId", payload.roomId, { explode: true, charEncoding: "percent" }),
            enc$.encodeForm("shortCode", payload.shortCode, {
                explode: true,
                charEncoding: "percent",
            }),
        ]
            .filter(Boolean)
            .join("&");

        const securitySettings = this.resolveSecurity([
            { value: security?.playerAuth, fieldName: "Authorization", type: "http:bearer" },
        ]);

        const response = await this.fetch$(
            { security: securitySettings, method: "post", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 201, "application/json")) {
            const responseBody = await response.json();
            const result = models.CreateLobbyResponse$.inboundSchema.parse({
                ...responseFields,
                LobbyV3: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get details for a lobby.
     */
    async getLobbyInfoByRoomId(
        roomId: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.GetLobbyInfoByRoomIdResponse> {
        const input: models.GetLobbyInfoByRoomIdRequest | undefined = {
            roomId: roomId,
            appId: appId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = models.GetLobbyInfoByRoomIdRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            roomId: enc$.encodeSimple("roomId", payload.roomId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/lobby/v3/{appId}/info/roomid/{roomId}")(
            pathParams
        );

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = models.GetLobbyInfoByRoomIdResponse$.inboundSchema.parse({
                ...responseFields,
                LobbyV3: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get details for a lobby. If 2 or more lobbies have the same `shortCode`, then the most recently created lobby will be returned.
     */
    async getLobbyInfoByShortCode(
        shortCode: string,
        appId?: string | undefined,
        options?: RequestOptions
    ): Promise<models.GetLobbyInfoByShortCodeResponse> {
        const input: models.GetLobbyInfoByShortCodeRequest | undefined = {
            shortCode: shortCode,
            appId: appId,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = models.GetLobbyInfoByShortCodeRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
            shortCode: enc$.encodeSimple("shortCode", payload.shortCode, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/lobby/v3/{appId}/info/shortcode/{shortCode}")(
            pathParams
        );

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = models.GetLobbyInfoByShortCodeResponse$.inboundSchema.parse({
                ...responseFields,
                LobbyV3: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }

    /**
     * Get all active lobbies for a given [application](https://hathora.dev/docs/concepts/hathora-entities#application). Filter the array by optionally passing in a `region`. Use this endpoint to display all public lobbies that a player can join in the game client.
     */
    async listActivePublicLobbies(
        appId?: string | undefined,
        region?: models.Region | undefined,
        options?: RequestOptions
    ): Promise<models.ListActivePublicLobbiesResponse> {
        const input: models.ListActivePublicLobbiesRequest | undefined = {
            appId: appId,
            region: region,
        };
        const headers = new Headers();
        headers.set("user-agent", SDK_METADATA.userAgent);
        headers.set("Accept", "application/json");

        const payload = models.ListActivePublicLobbiesRequest$.outboundSchema.parse(input);

        const body = null;

        const pathParams = {
            appId: enc$.encodeSimple("appId", payload.appId ?? this.options$.appId, {
                explode: false,
                charEncoding: "percent",
            }),
        };

        const path = this.templateURLComponent("/lobby/v3/{appId}/list/public")(pathParams);

        const query = [
            enc$.encodeForm("region", payload.region, { explode: true, charEncoding: "percent" }),
        ]
            .filter(Boolean)
            .join("&");

        const security =
            typeof this.options$.security === "function"
                ? await this.options$.security()
                : this.options$.security;
        const securitySettings = this.resolveGlobalSecurity(security);

        const response = await this.fetch$(
            { security: securitySettings, method: "get", path, headers, query, body },
            options
        );

        const responseFields = {
            ContentType: response.headers.get("content-type") ?? "application/octet-stream",
            StatusCode: response.status,
            RawResponse: response,
        };

        if (this.matchResponse(response, 200, "application/json")) {
            const responseBody = await response.json();
            const result = models.ListActivePublicLobbiesResponse$.inboundSchema.parse({
                ...responseFields,
                classes: responseBody,
            });
            return result;
        } else {
            const responseBody = await response.text();
            throw new models.SDKError("Unexpected API response", response, responseBody);
        }
    }
}
