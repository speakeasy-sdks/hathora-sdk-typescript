/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RoomWithoutAllocations, RoomWithoutAllocations$ } from "./roomwithoutallocations";
import { z } from "zod";

export type GetInactiveRoomsForProcessRequest = {
    processId: string;
    appId?: string | undefined;
};

export type GetInactiveRoomsForProcessResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Ok
     */
    classes?: Array<RoomWithoutAllocations> | undefined;
};

/** @internal */
export namespace GetInactiveRoomsForProcessRequest$ {
    export type Inbound = {
        processId: string;
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetInactiveRoomsForProcessRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            processId: z.string(),
            appId: z.string().optional(),
        })
        .transform((v) => ({
            processId: v.processId,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));

    export type Outbound = {
        processId: string;
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetInactiveRoomsForProcessRequest
    > = z
        .object({
            processId: z.string(),
            appId: z.string().optional(),
        })
        .transform((v) => ({
            processId: v.processId,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));
}

/** @internal */
export namespace GetInactiveRoomsForProcessResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        classes?: Array<RoomWithoutAllocations$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetInactiveRoomsForProcessResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            classes: z.array(RoomWithoutAllocations$.inboundSchema).optional(),
        })
        .transform((v) => ({
            contentType: v.ContentType,
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
            ...(v.classes === undefined ? null : { classes: v.classes }),
        }));

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        classes?: Array<RoomWithoutAllocations$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetInactiveRoomsForProcessResponse
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            classes: z.array(RoomWithoutAllocations$.outboundSchema).optional(),
        })
        .transform((v) => ({
            ContentType: v.contentType,
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
            ...(v.classes === undefined ? null : { classes: v.classes }),
        }));
}
