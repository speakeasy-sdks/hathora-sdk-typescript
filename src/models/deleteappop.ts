/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type DeleteAppRequest = {
    appId?: string | undefined;
};

export type DeleteAppResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace DeleteAppRequest$ {
    export type Inbound = {
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<DeleteAppRequest, z.ZodTypeDef, Inbound> = z
        .object({
            appId: z.string().optional(),
        })
        .transform((v) => ({
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));

    export type Outbound = {
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteAppRequest> = z
        .object({
            appId: z.string().optional(),
        })
        .transform((v) => ({
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));
}

/** @internal */
export namespace DeleteAppResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<DeleteAppResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => ({
            contentType: v.ContentType,
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
        }));

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeleteAppResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => ({
            ContentType: v.contentType,
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
        }));
}
