/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ActiveConnectionInfo, ActiveConnectionInfo$ } from "./activeconnectioninfo";
import { StartingConnectionInfo, StartingConnectionInfo$ } from "./startingconnectioninfo";
import { z } from "zod";

export type GetConnectionInfoDeprecatedRequest = {
    roomId: string;
    appId?: string | undefined;
};

export type GetConnectionInfoDeprecatedResponse = {
    /**
     * Ok
     */
    connectionInfo?: StartingConnectionInfo | ActiveConnectionInfo | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetConnectionInfoDeprecatedRequest$ {
    export type Inbound = {
        roomId: string;
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<
        GetConnectionInfoDeprecatedRequest,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            roomId: z.string(),
            appId: z.string().optional(),
        })
        .transform((v) => ({
            roomId: v.roomId,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));

    export type Outbound = {
        roomId: string;
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetConnectionInfoDeprecatedRequest
    > = z
        .object({
            roomId: z.string(),
            appId: z.string().optional(),
        })
        .transform((v) => ({
            roomId: v.roomId,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));
}

/** @internal */
export namespace GetConnectionInfoDeprecatedResponse$ {
    export type Inbound = {
        ConnectionInfo?:
            | StartingConnectionInfo$.Inbound
            | ActiveConnectionInfo$.Inbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<
        GetConnectionInfoDeprecatedResponse,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ConnectionInfo: z
                .union([StartingConnectionInfo$.inboundSchema, ActiveConnectionInfo$.inboundSchema])
                .optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => ({
            ...(v.ConnectionInfo === undefined ? null : { connectionInfo: v.ConnectionInfo }),
            contentType: v.ContentType,
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
        }));

    export type Outbound = {
        ConnectionInfo?:
            | StartingConnectionInfo$.Outbound
            | ActiveConnectionInfo$.Outbound
            | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetConnectionInfoDeprecatedResponse
    > = z
        .object({
            connectionInfo: z
                .union([
                    StartingConnectionInfo$.outboundSchema,
                    ActiveConnectionInfo$.outboundSchema,
                ])
                .optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => ({
            ...(v.connectionInfo === undefined ? null : { ConnectionInfo: v.connectionInfo }),
            ContentType: v.contentType,
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
        }));
}
