/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { CreateLobbyV3Params, CreateLobbyV3Params$ } from "./createlobbyv3params";
import { LobbyV3, LobbyV3$ } from "./lobbyv3";
import { z } from "zod";

export type CreateLobbySecurity = {
    playerAuth: string;
};

export type CreateLobbyRequest = {
    createLobbyV3Params: CreateLobbyV3Params;
    appId?: string | undefined;
    roomId?: string | undefined;
    shortCode?: string | undefined;
};

export type CreateLobbyResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    lobbyV3?: LobbyV3 | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateLobbyRequest$ {
    export type Inbound = {
        CreateLobbyV3Params: CreateLobbyV3Params$.Inbound;
        appId?: string | undefined;
        roomId?: string | undefined;
        shortCode?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateLobbyRequest, z.ZodTypeDef, Inbound> = z
        .object({
            CreateLobbyV3Params: CreateLobbyV3Params$.inboundSchema,
            appId: z.string().optional(),
            roomId: z.string().optional(),
            shortCode: z.string().optional(),
        })
        .transform((v) => ({
            createLobbyV3Params: v.CreateLobbyV3Params,
            ...(v.appId === undefined ? null : { appId: v.appId }),
            ...(v.roomId === undefined ? null : { roomId: v.roomId }),
            ...(v.shortCode === undefined ? null : { shortCode: v.shortCode }),
        }));

    export type Outbound = {
        CreateLobbyV3Params: CreateLobbyV3Params$.Outbound;
        appId?: string | undefined;
        roomId?: string | undefined;
        shortCode?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateLobbyRequest> = z
        .object({
            createLobbyV3Params: CreateLobbyV3Params$.outboundSchema,
            appId: z.string().optional(),
            roomId: z.string().optional(),
            shortCode: z.string().optional(),
        })
        .transform((v) => ({
            CreateLobbyV3Params: v.createLobbyV3Params,
            ...(v.appId === undefined ? null : { appId: v.appId }),
            ...(v.roomId === undefined ? null : { roomId: v.roomId }),
            ...(v.shortCode === undefined ? null : { shortCode: v.shortCode }),
        }));
}

/** @internal */
export namespace CreateLobbyResponse$ {
    export type Inbound = {
        ContentType: string;
        LobbyV3?: LobbyV3$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateLobbyResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            LobbyV3: LobbyV3$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => ({
            contentType: v.ContentType,
            ...(v.LobbyV3 === undefined ? null : { lobbyV3: v.LobbyV3 }),
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
        }));

    export type Outbound = {
        ContentType: string;
        LobbyV3?: LobbyV3$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateLobbyResponse> = z
        .object({
            contentType: z.string(),
            lobbyV3: LobbyV3$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => ({
            ContentType: v.contentType,
            ...(v.lobbyV3 === undefined ? null : { LobbyV3: v.lobbyV3 }),
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
        }));
}
