/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { z } from "zod";

export type GetLogsForDeploymentRequest = {
    appId?: string | undefined;
    deploymentId: number;
    follow?: boolean | undefined;
    tailLines?: number | undefined;
};

export type GetLogsForDeploymentResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Ok
     */
    res?: string | undefined;
};

/** @internal */
export namespace GetLogsForDeploymentRequest$ {
    export type Inbound = {
        appId?: string | undefined;
        deploymentId: number;
        follow?: boolean | undefined;
        tailLines?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetLogsForDeploymentRequest, z.ZodTypeDef, Inbound> = z
        .object({
            appId: z.string().optional(),
            deploymentId: z.number().int(),
            follow: z.boolean().optional(),
            tailLines: z.number().int().optional(),
        })
        .transform((v) => ({
            ...(v.appId === undefined ? null : { appId: v.appId }),
            deploymentId: v.deploymentId,
            ...(v.follow === undefined ? null : { follow: v.follow }),
            ...(v.tailLines === undefined ? null : { tailLines: v.tailLines }),
        }));

    export type Outbound = {
        appId?: string | undefined;
        deploymentId: number;
        follow?: boolean | undefined;
        tailLines?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLogsForDeploymentRequest> = z
        .object({
            appId: z.string().optional(),
            deploymentId: z.number().int(),
            follow: z.boolean().optional(),
            tailLines: z.number().int().optional(),
        })
        .transform((v) => ({
            ...(v.appId === undefined ? null : { appId: v.appId }),
            deploymentId: v.deploymentId,
            ...(v.follow === undefined ? null : { follow: v.follow }),
            ...(v.tailLines === undefined ? null : { tailLines: v.tailLines }),
        }));
}

/** @internal */
export namespace GetLogsForDeploymentResponse$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        res?: string | undefined;
    };

    export const inboundSchema: z.ZodType<GetLogsForDeploymentResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            res: z.string().optional(),
        })
        .transform((v) => ({
            contentType: v.ContentType,
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
            ...(v.res === undefined ? null : { res: v.res }),
        }));

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        res?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetLogsForDeploymentResponse> = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            res: z.string().optional(),
        })
        .transform((v) => ({
            ContentType: v.contentType,
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
            ...(v.res === undefined ? null : { res: v.res }),
        }));
}
