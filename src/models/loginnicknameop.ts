/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { LoginNicknameRequest, LoginNicknameRequest$ } from "./loginnicknamerequest";
import { LoginResponse, LoginResponse$ } from "./loginresponse";
import { z } from "zod";

export type LoginNicknameRequest1 = {
    loginNicknameRequest: LoginNicknameRequest;
    appId?: string | undefined;
};

export type LoginNicknameResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Ok
     */
    loginResponse?: LoginResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace LoginNicknameRequest1$ {
    export type Inbound = {
        LoginNicknameRequest: LoginNicknameRequest$.Inbound;
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<LoginNicknameRequest1, z.ZodTypeDef, Inbound> = z
        .object({
            LoginNicknameRequest: LoginNicknameRequest$.inboundSchema,
            appId: z.string().optional(),
        })
        .transform((v) => ({
            loginNicknameRequest: v.LoginNicknameRequest,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));

    export type Outbound = {
        LoginNicknameRequest: LoginNicknameRequest$.Outbound;
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginNicknameRequest1> = z
        .object({
            loginNicknameRequest: LoginNicknameRequest$.outboundSchema,
            appId: z.string().optional(),
        })
        .transform((v) => ({
            LoginNicknameRequest: v.loginNicknameRequest,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));
}

/** @internal */
export namespace LoginNicknameResponse$ {
    export type Inbound = {
        ContentType: string;
        LoginResponse?: LoginResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<LoginNicknameResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            LoginResponse: LoginResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => ({
            contentType: v.ContentType,
            ...(v.LoginResponse === undefined ? null : { loginResponse: v.LoginResponse }),
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
        }));

    export type Outbound = {
        ContentType: string;
        LoginResponse?: LoginResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, LoginNicknameResponse> = z
        .object({
            contentType: z.string(),
            loginResponse: LoginResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => ({
            ContentType: v.contentType,
            ...(v.loginResponse === undefined ? null : { LoginResponse: v.loginResponse }),
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
        }));
}
