/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Build, Build$ } from "./build";
import { CreateBuildParams, CreateBuildParams$ } from "./createbuildparams";
import { z } from "zod";

export type CreateBuildRequest = {
    createBuildParams: CreateBuildParams;
    appId?: string | undefined;
};

export type CreateBuildResponse = {
    build?: Build | undefined;
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace CreateBuildRequest$ {
    export type Inbound = {
        CreateBuildParams: CreateBuildParams$.Inbound;
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<CreateBuildRequest, z.ZodTypeDef, Inbound> = z
        .object({
            CreateBuildParams: CreateBuildParams$.inboundSchema,
            appId: z.string().optional(),
        })
        .transform((v) => ({
            createBuildParams: v.CreateBuildParams,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));

    export type Outbound = {
        CreateBuildParams: CreateBuildParams$.Outbound;
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBuildRequest> = z
        .object({
            createBuildParams: CreateBuildParams$.outboundSchema,
            appId: z.string().optional(),
        })
        .transform((v) => ({
            CreateBuildParams: v.createBuildParams,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));
}

/** @internal */
export namespace CreateBuildResponse$ {
    export type Inbound = {
        Build?: Build$.Inbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<CreateBuildResponse, z.ZodTypeDef, Inbound> = z
        .object({
            Build: Build$.inboundSchema.optional(),
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => ({
            ...(v.Build === undefined ? null : { build: v.Build }),
            contentType: v.ContentType,
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
        }));

    export type Outbound = {
        Build?: Build$.Outbound | undefined;
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CreateBuildResponse> = z
        .object({
            build: Build$.outboundSchema.optional(),
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => ({
            ...(v.build === undefined ? null : { Build: v.build }),
            ContentType: v.contentType,
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
        }));
}
