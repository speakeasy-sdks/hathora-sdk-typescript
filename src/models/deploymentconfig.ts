/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { ContainerPort, ContainerPort$ } from "./containerport";
import { PlanName, PlanName$ } from "./planname";
import { TransportType, TransportType$ } from "./transporttype";
import { z } from "zod";

export type DeploymentConfigEnv = {
    name: string;
    value: string;
};

/**
 * User specified deployment configuration for your application at runtime.
 */
export type DeploymentConfig = {
    /**
     * Additional ports your server listens on.
     */
    additionalContainerPorts?: Array<ContainerPort> | undefined;
    /**
     * Default port the server listens on.
     */
    containerPort: number;
    /**
     * The environment variable that our process will have access to at runtime.
     */
    env: Array<DeploymentConfigEnv>;
    /**
     * A plan defines how much CPU and memory is required to run an instance of your game server.
     *
     * @remarks
     *
     * `tiny`: shared core, 1gb memory
     *
     * `small`: 1 core, 2gb memory
     *
     * `medium`: 2 core, 4gb memory
     *
     * `large`: 4 core, 8gb memory
     */
    planName: PlanName;
    /**
     * Governs how many [rooms](https://hathora.dev/docs/concepts/hathora-entities#room) can be scheduled in a process.
     */
    roomsPerProcess: number;
    /**
     * Transport type specifies the underlying communication protocol to the exposed port.
     */
    transportType: TransportType;
};

/** @internal */
export namespace DeploymentConfigEnv$ {
    export type Inbound = {
        name: string;
        value: string;
    };

    export const inboundSchema: z.ZodType<DeploymentConfigEnv, z.ZodTypeDef, Inbound> = z
        .object({
            name: z.string(),
            value: z.string(),
        })
        .transform((v) => ({
            name: v.name,
            value: v.value,
        }));

    export type Outbound = {
        name: string;
        value: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeploymentConfigEnv> = z
        .object({
            name: z.string(),
            value: z.string(),
        })
        .transform((v) => ({
            name: v.name,
            value: v.value,
        }));
}

/** @internal */
export namespace DeploymentConfig$ {
    export type Inbound = {
        additionalContainerPorts?: Array<ContainerPort$.Inbound> | undefined;
        containerPort: number;
        env: Array<DeploymentConfigEnv$.Inbound>;
        planName: PlanName;
        roomsPerProcess: number;
        transportType: TransportType;
    };

    export const inboundSchema: z.ZodType<DeploymentConfig, z.ZodTypeDef, Inbound> = z
        .object({
            additionalContainerPorts: z.array(ContainerPort$.inboundSchema).optional(),
            containerPort: z.number().int(),
            env: z.array(z.lazy(() => DeploymentConfigEnv$.inboundSchema)),
            planName: PlanName$,
            roomsPerProcess: z.number().int(),
            transportType: TransportType$,
        })
        .transform((v) => ({
            ...(v.additionalContainerPorts === undefined
                ? null
                : { additionalContainerPorts: v.additionalContainerPorts }),
            containerPort: v.containerPort,
            env: v.env,
            planName: v.planName,
            roomsPerProcess: v.roomsPerProcess,
            transportType: v.transportType,
        }));

    export type Outbound = {
        additionalContainerPorts?: Array<ContainerPort$.Outbound> | undefined;
        containerPort: number;
        env: Array<DeploymentConfigEnv$.Outbound>;
        planName: PlanName;
        roomsPerProcess: number;
        transportType: TransportType;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, DeploymentConfig> = z
        .object({
            additionalContainerPorts: z.array(ContainerPort$.outboundSchema).optional(),
            containerPort: z.number().int(),
            env: z.array(z.lazy(() => DeploymentConfigEnv$.outboundSchema)),
            planName: PlanName$,
            roomsPerProcess: z.number().int(),
            transportType: TransportType$,
        })
        .transform((v) => ({
            ...(v.additionalContainerPorts === undefined
                ? null
                : { additionalContainerPorts: v.additionalContainerPorts }),
            containerPort: v.containerPort,
            env: v.env,
            planName: v.planName,
            roomsPerProcess: v.roomsPerProcess,
            transportType: v.transportType,
        }));
}
