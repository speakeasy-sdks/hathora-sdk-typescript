/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { AuthConfiguration, AuthConfiguration$ } from "./authconfiguration";
import { Deployment, Deployment$ } from "./deployment";
import { z } from "zod";

/**
 * An application object is the top level namespace for the game server.
 */
export type ApplicationWithDeployment = {
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
    /**
     * Readable name for an application. Must be unique within an organization.
     */
    appName: string;
    /**
     * Secret that is used for identity and access management.
     */
    appSecret: string;
    /**
     * Configure [player authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service) for your application. Use Hathora's built-in auth providers or use your own [custom authentication](https://hathora.dev/docs/lobbies-and-matchmaking/auth-service#custom-auth-provider).
     */
    authConfiguration: AuthConfiguration;
    /**
     * When the application was created.
     */
    createdAt: Date;
    /**
     * Email address for the user that deleted the application.
     */
    createdBy: string;
    /**
     * When the application was deleted.
     */
    deletedAt: Date | null;
    /**
     * Email address for the user that deleted the application.
     */
    deletedBy: string | null;
    /**
     * Deployment is a versioned configuration for a build that describes runtime behavior.
     */
    deployment: Deployment;
    /**
     * System generated unique identifier for an organization.
     */
    orgId: string;
};

/** @internal */
export namespace ApplicationWithDeployment$ {
    export type Inbound = {
        appId: string;
        appName: string;
        appSecret: string;
        authConfiguration: AuthConfiguration$.Inbound;
        createdAt: string;
        createdBy: string;
        deletedAt: string | null;
        deletedBy: string | null;
        deployment: Deployment$.Inbound;
        orgId: string;
    };

    export const inboundSchema: z.ZodType<ApplicationWithDeployment, z.ZodTypeDef, Inbound> = z
        .object({
            appId: z.string(),
            appName: z.string(),
            appSecret: z.string(),
            authConfiguration: AuthConfiguration$.inboundSchema,
            createdAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            createdBy: z.string(),
            deletedAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .nullable(),
            deletedBy: z.string().nullable(),
            deployment: Deployment$.inboundSchema,
            orgId: z.string(),
        })
        .transform((v) => ({
            appId: v.appId,
            appName: v.appName,
            appSecret: v.appSecret,
            authConfiguration: v.authConfiguration,
            createdAt: v.createdAt,
            createdBy: v.createdBy,
            deletedAt: v.deletedAt,
            deletedBy: v.deletedBy,
            deployment: v.deployment,
            orgId: v.orgId,
        }));

    export type Outbound = {
        appId: string;
        appName: string;
        appSecret: string;
        authConfiguration: AuthConfiguration$.Outbound;
        createdAt: string;
        createdBy: string;
        deletedAt: string | null;
        deletedBy: string | null;
        deployment: Deployment$.Outbound;
        orgId: string;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, ApplicationWithDeployment> = z
        .object({
            appId: z.string(),
            appName: z.string(),
            appSecret: z.string(),
            authConfiguration: AuthConfiguration$.outboundSchema,
            createdAt: z.date().transform((v) => v.toISOString()),
            createdBy: z.string(),
            deletedAt: z
                .date()
                .transform((v) => v.toISOString())
                .nullable(),
            deletedBy: z.string().nullable(),
            deployment: Deployment$.outboundSchema,
            orgId: z.string(),
        })
        .transform((v) => ({
            appId: v.appId,
            appName: v.appName,
            appSecret: v.appSecret,
            authConfiguration: v.authConfiguration,
            createdAt: v.createdAt,
            createdBy: v.createdBy,
            deletedAt: v.deletedAt,
            deletedBy: v.deletedBy,
            deployment: v.deployment,
            orgId: v.orgId,
        }));
}
