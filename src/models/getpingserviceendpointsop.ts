/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { DiscoveryResponse, DiscoveryResponse$ } from "./discoveryresponse";
import { z } from "zod";

export type GetPingServiceEndpointsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Ok
     */
    discoveryResponse?: Array<DiscoveryResponse> | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetPingServiceEndpointsResponse$ {
    export type Inbound = {
        ContentType: string;
        DiscoveryResponse?: Array<DiscoveryResponse$.Inbound> | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetPingServiceEndpointsResponse, z.ZodTypeDef, Inbound> =
        z
            .object({
                ContentType: z.string(),
                DiscoveryResponse: z.array(DiscoveryResponse$.inboundSchema).optional(),
                StatusCode: z.number().int(),
                RawResponse: z.instanceof(Response),
            })
            .transform((v) => ({
                contentType: v.ContentType,
                ...(v.DiscoveryResponse === undefined
                    ? null
                    : { discoveryResponse: v.DiscoveryResponse }),
                statusCode: v.StatusCode,
                rawResponse: v.RawResponse,
            }));

    export type Outbound = {
        ContentType: string;
        DiscoveryResponse?: Array<DiscoveryResponse$.Outbound> | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        GetPingServiceEndpointsResponse
    > = z
        .object({
            contentType: z.string(),
            discoveryResponse: z.array(DiscoveryResponse$.outboundSchema).optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => ({
            ContentType: v.contentType,
            ...(v.discoveryResponse === undefined
                ? null
                : { DiscoveryResponse: v.discoveryResponse }),
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
        }));
}
