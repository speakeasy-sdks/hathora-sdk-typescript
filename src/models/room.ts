/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { RoomAllocation, RoomAllocation$ } from "./roomallocation";
import { RoomStatus, RoomStatus$ } from "./roomstatus";
import { z } from "zod";

/**
 * Metadata on an allocated instance of a room.
 */
export type CurrentAllocation = {
    /**
     * System generated unique identifier to a runtime instance of your game server.
     */
    processId: string;
    /**
     * System generated unique identifier to an allocated instance of a room.
     */
    roomAllocationId: string;
    scheduledAt: Date;
    unscheduledAt: Date | null;
};

/**
 * A room object represents a game session or match.
 */
export type Room = {
    allocations: Array<RoomAllocation>;
    /**
     * System generated unique identifier for an application.
     */
    appId: string;
    currentAllocation: CurrentAllocation | null;
    roomConfig: string | null;
    /**
     * Unique identifier to a game session or match. Use the default system generated ID or overwrite it with your own.
     *
     * @remarks
     * Note: error will be returned if `roomId` is not globally unique.
     */
    roomId: string;
    /**
     * The allocation status of a room.
     *
     * @remarks
     *
     * `scheduling`: a process is not allocated yet and the room is waiting to be scheduled
     *
     * `active`: ready to accept connections
     *
     * `suspended`: room is unallocated from the process but can be rescheduled later with the same `roomId`
     *
     * `destroyed`: all associated metadata is deleted
     */
    status: RoomStatus;
};

/** @internal */
export namespace CurrentAllocation$ {
    export type Inbound = {
        processId: string;
        roomAllocationId: string;
        scheduledAt: string;
        unscheduledAt: string | null;
    };

    export const inboundSchema: z.ZodType<CurrentAllocation, z.ZodTypeDef, Inbound> = z
        .object({
            processId: z.string(),
            roomAllocationId: z.string(),
            scheduledAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v)),
            unscheduledAt: z
                .string()
                .datetime({ offset: true })
                .transform((v) => new Date(v))
                .nullable(),
        })
        .transform((v) => ({
            processId: v.processId,
            roomAllocationId: v.roomAllocationId,
            scheduledAt: v.scheduledAt,
            unscheduledAt: v.unscheduledAt,
        }));

    export type Outbound = {
        processId: string;
        roomAllocationId: string;
        scheduledAt: string;
        unscheduledAt: string | null;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, CurrentAllocation> = z
        .object({
            processId: z.string(),
            roomAllocationId: z.string(),
            scheduledAt: z.date().transform((v) => v.toISOString()),
            unscheduledAt: z
                .date()
                .transform((v) => v.toISOString())
                .nullable(),
        })
        .transform((v) => ({
            processId: v.processId,
            roomAllocationId: v.roomAllocationId,
            scheduledAt: v.scheduledAt,
            unscheduledAt: v.unscheduledAt,
        }));
}

/** @internal */
export namespace Room$ {
    export type Inbound = {
        allocations: Array<RoomAllocation$.Inbound>;
        appId: string;
        currentAllocation: CurrentAllocation$.Inbound | null;
        roomConfig: string | null;
        roomId: string;
        status: RoomStatus;
    };

    export const inboundSchema: z.ZodType<Room, z.ZodTypeDef, Inbound> = z
        .object({
            allocations: z.array(RoomAllocation$.inboundSchema),
            appId: z.string(),
            currentAllocation: z.lazy(() => CurrentAllocation$.inboundSchema).nullable(),
            roomConfig: z.string().nullable(),
            roomId: z.string(),
            status: RoomStatus$,
        })
        .transform((v) => ({
            allocations: v.allocations,
            appId: v.appId,
            currentAllocation: v.currentAllocation,
            roomConfig: v.roomConfig,
            roomId: v.roomId,
            status: v.status,
        }));

    export type Outbound = {
        allocations: Array<RoomAllocation$.Outbound>;
        appId: string;
        currentAllocation: CurrentAllocation$.Outbound | null;
        roomConfig: string | null;
        roomId: string;
        status: RoomStatus;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, Room> = z
        .object({
            allocations: z.array(RoomAllocation$.outboundSchema),
            appId: z.string(),
            currentAllocation: z.lazy(() => CurrentAllocation$.outboundSchema).nullable(),
            roomConfig: z.string().nullable(),
            roomId: z.string(),
            status: RoomStatus$,
        })
        .transform((v) => ({
            allocations: v.allocations,
            appId: v.appId,
            currentAllocation: v.currentAllocation,
            roomConfig: v.roomConfig,
            roomId: v.roomId,
            status: v.status,
        }));
}
