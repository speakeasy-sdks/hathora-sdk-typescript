/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { MetricName, MetricName$ } from "./metricname";
import { MetricsResponse, MetricsResponse$ } from "./metricsresponse";
import { z } from "zod";

export type GetMetricsRequest = {
    appId?: string | undefined;
    /**
     * Unix timestamp. Default is current time.
     */
    end?: number | undefined;
    /**
     * Available metrics to query over time.
     */
    metrics?: Array<MetricName> | undefined;
    processId: string;
    /**
     * Unix timestamp. Default is -1 hour from `end`.
     */
    start?: number | undefined;
    step?: number | undefined;
};

export type GetMetricsResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Ok
     */
    metricsResponse?: MetricsResponse | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace GetMetricsRequest$ {
    export type Inbound = {
        appId?: string | undefined;
        end?: number | undefined;
        metrics?: Array<MetricName> | undefined;
        processId: string;
        start?: number | undefined;
        step?: number | undefined;
    };

    export const inboundSchema: z.ZodType<GetMetricsRequest, z.ZodTypeDef, Inbound> = z
        .object({
            appId: z.string().optional(),
            end: z.number().optional(),
            metrics: z.array(MetricName$).optional(),
            processId: z.string(),
            start: z.number().optional(),
            step: z.number().int().optional(),
        })
        .transform((v) => ({
            ...(v.appId === undefined ? null : { appId: v.appId }),
            ...(v.end === undefined ? null : { end: v.end }),
            ...(v.metrics === undefined ? null : { metrics: v.metrics }),
            processId: v.processId,
            ...(v.start === undefined ? null : { start: v.start }),
            ...(v.step === undefined ? null : { step: v.step }),
        }));

    export type Outbound = {
        appId?: string | undefined;
        end?: number | undefined;
        metrics?: Array<MetricName> | undefined;
        processId: string;
        start?: number | undefined;
        step?: number | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetricsRequest> = z
        .object({
            appId: z.string().optional(),
            end: z.number().optional(),
            metrics: z.array(MetricName$).optional(),
            processId: z.string(),
            start: z.number().optional(),
            step: z.number().int().optional(),
        })
        .transform((v) => ({
            ...(v.appId === undefined ? null : { appId: v.appId }),
            ...(v.end === undefined ? null : { end: v.end }),
            ...(v.metrics === undefined ? null : { metrics: v.metrics }),
            processId: v.processId,
            ...(v.start === undefined ? null : { start: v.start }),
            ...(v.step === undefined ? null : { step: v.step }),
        }));
}

/** @internal */
export namespace GetMetricsResponse$ {
    export type Inbound = {
        ContentType: string;
        MetricsResponse?: MetricsResponse$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<GetMetricsResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            MetricsResponse: MetricsResponse$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => ({
            contentType: v.ContentType,
            ...(v.MetricsResponse === undefined ? null : { metricsResponse: v.MetricsResponse }),
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
        }));

    export type Outbound = {
        ContentType: string;
        MetricsResponse?: MetricsResponse$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, GetMetricsResponse> = z
        .object({
            contentType: z.string(),
            metricsResponse: MetricsResponse$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => ({
            ContentType: v.contentType,
            ...(v.metricsResponse === undefined ? null : { MetricsResponse: v.metricsResponse }),
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
        }));
}
