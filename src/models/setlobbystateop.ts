/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Lobby, Lobby$ } from "./lobby";
import { SetLobbyStateParams, SetLobbyStateParams$ } from "./setlobbystateparams";
import { z } from "zod";

export type SetLobbyStateRequest = {
    setLobbyStateParams: SetLobbyStateParams;
    roomId: string;
    appId?: string | undefined;
};

export type SetLobbyStateResponse = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * Ok
     */
    lobby?: Lobby | undefined;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
};

/** @internal */
export namespace SetLobbyStateRequest$ {
    export type Inbound = {
        SetLobbyStateParams: SetLobbyStateParams$.Inbound;
        roomId: string;
        appId?: string | undefined;
    };

    export const inboundSchema: z.ZodType<SetLobbyStateRequest, z.ZodTypeDef, Inbound> = z
        .object({
            SetLobbyStateParams: SetLobbyStateParams$.inboundSchema,
            roomId: z.string(),
            appId: z.string().optional(),
        })
        .transform((v) => ({
            setLobbyStateParams: v.SetLobbyStateParams,
            roomId: v.roomId,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));

    export type Outbound = {
        SetLobbyStateParams: SetLobbyStateParams$.Outbound;
        roomId: string;
        appId?: string | undefined;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SetLobbyStateRequest> = z
        .object({
            setLobbyStateParams: SetLobbyStateParams$.outboundSchema,
            roomId: z.string(),
            appId: z.string().optional(),
        })
        .transform((v) => ({
            SetLobbyStateParams: v.setLobbyStateParams,
            roomId: v.roomId,
            ...(v.appId === undefined ? null : { appId: v.appId }),
        }));
}

/** @internal */
export namespace SetLobbyStateResponse$ {
    export type Inbound = {
        ContentType: string;
        Lobby?: Lobby$.Inbound | undefined;
        StatusCode: number;
        RawResponse: Response;
    };

    export const inboundSchema: z.ZodType<SetLobbyStateResponse, z.ZodTypeDef, Inbound> = z
        .object({
            ContentType: z.string(),
            Lobby: Lobby$.inboundSchema.optional(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
        })
        .transform((v) => ({
            contentType: v.ContentType,
            ...(v.Lobby === undefined ? null : { lobby: v.Lobby }),
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
        }));

    export type Outbound = {
        ContentType: string;
        Lobby?: Lobby$.Outbound | undefined;
        StatusCode: number;
        RawResponse: never;
    };

    export const outboundSchema: z.ZodType<Outbound, z.ZodTypeDef, SetLobbyStateResponse> = z
        .object({
            contentType: z.string(),
            lobby: Lobby$.outboundSchema.optional(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
        })
        .transform((v) => ({
            ContentType: v.contentType,
            ...(v.lobby === undefined ? null : { Lobby: v.lobby }),
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
        }));
}
