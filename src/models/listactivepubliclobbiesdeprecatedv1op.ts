/*
 * Code generated by Speakeasy (https://speakeasyapi.dev). DO NOT EDIT.
 */

import { Lobby, Lobby$ } from "./lobby";
import { Region, Region$ } from "./region";
import { z } from "zod";

export type ListActivePublicLobbiesDeprecatedV1Request = {
    appId?: string | undefined;
    local?: boolean | undefined;
    region?: Region | undefined;
};

export type ListActivePublicLobbiesDeprecatedV1Response = {
    /**
     * HTTP response content type for this operation
     */
    contentType: string;
    /**
     * HTTP response status code for this operation
     */
    statusCode: number;
    /**
     * Raw HTTP response; suitable for custom response parsing
     */
    rawResponse: Response;
    /**
     * Ok
     */
    classes?: Array<Lobby> | undefined;
};

/** @internal */
export namespace ListActivePublicLobbiesDeprecatedV1Request$ {
    export type Inbound = {
        appId?: string | undefined;
        local?: boolean | undefined;
        region?: Region | undefined;
    };

    export const inboundSchema: z.ZodType<
        ListActivePublicLobbiesDeprecatedV1Request,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            appId: z.string().optional(),
            local: z.boolean().optional(),
            region: Region$.optional(),
        })
        .transform((v) => ({
            ...(v.appId === undefined ? null : { appId: v.appId }),
            ...(v.local === undefined ? null : { local: v.local }),
            ...(v.region === undefined ? null : { region: v.region }),
        }));

    export type Outbound = {
        appId?: string | undefined;
        local?: boolean | undefined;
        region?: Region | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListActivePublicLobbiesDeprecatedV1Request
    > = z
        .object({
            appId: z.string().optional(),
            local: z.boolean().optional(),
            region: Region$.optional(),
        })
        .transform((v) => ({
            ...(v.appId === undefined ? null : { appId: v.appId }),
            ...(v.local === undefined ? null : { local: v.local }),
            ...(v.region === undefined ? null : { region: v.region }),
        }));
}

/** @internal */
export namespace ListActivePublicLobbiesDeprecatedV1Response$ {
    export type Inbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: Response;
        classes?: Array<Lobby$.Inbound> | undefined;
    };

    export const inboundSchema: z.ZodType<
        ListActivePublicLobbiesDeprecatedV1Response,
        z.ZodTypeDef,
        Inbound
    > = z
        .object({
            ContentType: z.string(),
            StatusCode: z.number().int(),
            RawResponse: z.instanceof(Response),
            classes: z.array(Lobby$.inboundSchema).optional(),
        })
        .transform((v) => ({
            contentType: v.ContentType,
            statusCode: v.StatusCode,
            rawResponse: v.RawResponse,
            ...(v.classes === undefined ? null : { classes: v.classes }),
        }));

    export type Outbound = {
        ContentType: string;
        StatusCode: number;
        RawResponse: never;
        classes?: Array<Lobby$.Outbound> | undefined;
    };

    export const outboundSchema: z.ZodType<
        Outbound,
        z.ZodTypeDef,
        ListActivePublicLobbiesDeprecatedV1Response
    > = z
        .object({
            contentType: z.string(),
            statusCode: z.number().int(),
            rawResponse: z.instanceof(Response).transform(() => {
                throw new Error("Response cannot be serialized");
            }),
            classes: z.array(Lobby$.outboundSchema).optional(),
        })
        .transform((v) => ({
            ContentType: v.contentType,
            StatusCode: v.statusCode,
            RawResponse: v.rawResponse,
            ...(v.classes === undefined ? null : { classes: v.classes }),
        }));
}
